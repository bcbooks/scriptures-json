{"version":3,"file":"apply_redirects.js","sourceRoot":"","sources":["../../../../modules/@angular/router/src/apply_redirects.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatAll} from 'rxjs/operator/concatAll';\nimport {first} from 'rxjs/operator/first';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {EmptyError} from 'rxjs/util/EmptyError';\n\nimport {Route, Routes} from './config';\nimport {LoadedRouterConfig, RouterConfigLoader} from './router_config_loader';\nimport {NavigationCancelingError, PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {andObservables, merge, waitForMap, wrapIntoObservable} from './utils/collection';\n\nclass NoMatch {\n  constructor(public segmentGroup: UrlSegmentGroup = null) {}\n}\n\nclass AbsoluteRedirect {\n  constructor(public segments: UrlSegment[]) {}\n}\n\nfunction noMatch(segmentGroup: UrlSegmentGroup): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new NoMatch(segmentGroup)));\n}\n\nfunction absoluteRedirect(segments: UrlSegment[]): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new AbsoluteRedirect(segments)));\n}\n\nfunction canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return new Observable<LoadedRouterConfig>(\n      (obs: Observer<LoadedRouterConfig>) => obs.error(new NavigationCancelingError(\n          `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n\n\nexport function applyRedirects(\n    injector: Injector, configLoader: RouterConfigLoader, urlTree: UrlTree,\n    config: Routes): Observable<UrlTree> {\n  return new ApplyRedirects(injector, configLoader, urlTree, config).apply();\n}\n\nclass ApplyRedirects {\n  private allowRedirects: boolean = true;\n\n  constructor(\n      private injector: Injector, private configLoader: RouterConfigLoader,\n      private urlTree: UrlTree, private config: Routes) {}\n\n  apply(): Observable<UrlTree> {\n    const expanded$ =\n        this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);\n    const urlTrees$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) => this.createUrlTree(rootSegmentGroup));\n    return _catch.call(urlTrees$, (e: any) => {\n      if (e instanceof AbsoluteRedirect) {\n        // after an absolute redirect we do not apply any more redirects!\n        this.allowRedirects = false;\n        const group =\n            new UrlSegmentGroup([], {[PRIMARY_OUTLET]: new UrlSegmentGroup(e.segments, {})});\n        // we need to run matching, so we can fetch all lazy-loaded modules\n        return this.match(group);\n      } else if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      } else {\n        throw e;\n      }\n    });\n  }\n\n  private match(segmentGroup: UrlSegmentGroup): Observable<UrlTree> {\n    const expanded$ =\n        this.expandSegmentGroup(this.injector, this.config, segmentGroup, PRIMARY_OUTLET);\n    const mapped$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) => this.createUrlTree(rootSegmentGroup));\n    return _catch.call(mapped$, (e: any): Observable<UrlTree> => {\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      } else {\n        throw e;\n      }\n    });\n  }\n\n  private noMatchError(e: NoMatch): any {\n    return new Error(`Cannot match any routes: '${e.segmentGroup}'`);\n  }\n\n  private createUrlTree(rootCandidate: UrlSegmentGroup): UrlTree {\n    const root = rootCandidate.segments.length > 0 ?\n        new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate}) :\n        rootCandidate;\n    return new UrlTree(root, this.urlTree.queryParams, this.urlTree.fragment);\n  }\n\n  private expandSegmentGroup(\n      injector: Injector, routes: Route[], segmentGroup: UrlSegmentGroup,\n      outlet: string): Observable<UrlSegmentGroup> {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return map.call(\n          this.expandChildren(injector, routes, segmentGroup),\n          (children: any) => new UrlSegmentGroup([], children));\n    } else {\n      return this.expandSegment(\n          injector, segmentGroup, routes, segmentGroup.segments, outlet, true);\n    }\n  }\n\n  private expandChildren(injector: Injector, routes: Route[], segmentGroup: UrlSegmentGroup):\n      Observable<{[name: string]: UrlSegmentGroup}> {\n    return waitForMap(\n        segmentGroup.children,\n        (childOutlet, child) => this.expandSegmentGroup(injector, routes, child, childOutlet));\n  }\n\n  private expandSegment(\n      injector: Injector, segmentGroup: UrlSegmentGroup, routes: Route[], segments: UrlSegment[],\n      outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    const routes$ = of (...routes);\n    const processedRoutes$ = map.call(routes$, (r: any) => {\n      const expanded$ = this.expandSegmentAgainstRoute(\n          injector, segmentGroup, routes, r, segments, outlet, allowRedirects);\n      return _catch.call(expanded$, (e: any) => {\n        if (e instanceof NoMatch)\n          return of (null);\n        else\n          throw e;\n      });\n    });\n    const concattedProcessedRoutes$ = concatAll.call(processedRoutes$);\n    const first$ = first.call(concattedProcessedRoutes$, (s: any) => !!s);\n    return _catch.call(first$, (e: any, _: any): Observable<UrlSegmentGroup> => {\n      if (e instanceof EmptyError) {\n        throw new NoMatch(segmentGroup);\n      } else {\n        throw e;\n      }\n    });\n  }\n\n  private expandSegmentAgainstRoute(\n      injector: Injector, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      paths: UrlSegment[], outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    if (getOutlet(route) !== outlet) return noMatch(segmentGroup);\n    if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects))\n      return noMatch(segmentGroup);\n\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);\n    } else {\n      return this.expandSegmentAgainstRouteUsingRedirect(\n          injector, segmentGroup, routes, route, paths, outlet);\n    }\n  }\n\n  private expandSegmentAgainstRouteUsingRedirect(\n      injector: Injector, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(route);\n    } else {\n      return this.expandRegularSegmentAgainstRouteUsingRedirect(\n          injector, segmentGroup, routes, route, segments, outlet);\n    }\n  }\n\n  private expandWildCardWithParamsAgainstRouteUsingRedirect(route: Route):\n      Observable<UrlSegmentGroup> {\n    const newSegments = applyRedirectCommands([], route.redirectTo, {});\n    if (route.redirectTo.startsWith('/')) {\n      return absoluteRedirect(newSegments);\n    } else {\n      return of (new UrlSegmentGroup(newSegments, {}));\n    }\n  }\n\n  private expandRegularSegmentAgainstRouteUsingRedirect(\n      injector: Injector, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    const {matched, consumedSegments, lastChild, positionalParamSegments} =\n        match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n\n    const newSegments =\n        applyRedirectCommands(consumedSegments, route.redirectTo, <any>positionalParamSegments);\n    if (route.redirectTo.startsWith('/')) {\n      return absoluteRedirect(newSegments);\n    } else {\n      return this.expandSegment(\n          injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet,\n          false);\n    }\n  }\n\n  private matchSegmentAgainstRoute(\n      injector: Injector, rawSegmentGroup: UrlSegmentGroup, route: Route,\n      segments: UrlSegment[]): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      return of (new UrlSegmentGroup(segments, {}));\n\n    } else {\n      const {matched, consumedSegments, lastChild} = match(rawSegmentGroup, route, segments);\n      if (!matched) return noMatch(rawSegmentGroup);\n\n      const rawSlicedSegments = segments.slice(lastChild);\n      const childConfig$ = this.getChildConfig(injector, route);\n      return mergeMap.call(childConfig$, (routerConfig: any) => {\n        const childInjector = routerConfig.injector;\n        const childConfig = routerConfig.routes;\n        const {segmentGroup, slicedSegments} =\n            split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n          const expanded$ = this.expandChildren(childInjector, childConfig, segmentGroup);\n          return map.call(\n              expanded$, (children: any) => new UrlSegmentGroup(consumedSegments, children));\n\n        } else if (childConfig.length === 0 && slicedSegments.length === 0) {\n          return of (new UrlSegmentGroup(consumedSegments, {}));\n\n        } else {\n          const expanded$ = this.expandSegment(\n              childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n          return map.call(\n              expanded$,\n              (cs: any) => new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children));\n        }\n      });\n    }\n  }\n\n  private getChildConfig(injector: Injector, route: Route): Observable<LoadedRouterConfig> {\n    if (route.children) {\n      return of (new LoadedRouterConfig(route.children, injector, null));\n    } else if (route.loadChildren) {\n      return mergeMap.call(runGuards(injector, route), (shouldLoad: any) => {\n        if (shouldLoad) {\n          if ((<any>route)._loadedConfig) {\n            return of ((<any>route)._loadedConfig);\n          } else {\n            return map.call(this.configLoader.load(injector, route.loadChildren), (r: any) => {\n              (<any>route)._loadedConfig = r;\n              return r;\n            });\n          }\n        } else {\n          return canLoadFails(route);\n        }\n      });\n    } else {\n      return of (new LoadedRouterConfig([], injector, null));\n    }\n  }\n}\n\nfunction runGuards(injector: Injector, route: Route): Observable<boolean> {\n  const canLoad = route.canLoad;\n  if (!canLoad || canLoad.length === 0) return of (true);\n  const obs = map.call(from(canLoad), (c: any) => {\n    const guard = injector.get(c);\n    if (guard.canLoad) {\n      return wrapIntoObservable(guard.canLoad(route));\n    } else {\n      return wrapIntoObservable(guard(route));\n    }\n  });\n  return andObservables(obs);\n}\n\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): {\n  matched: boolean,\n  consumedSegments: UrlSegment[],\n  lastChild: number,\n  positionalParamSegments: {[k: string]: UrlSegment}\n} {\n  const noMatch =\n      {matched: false, consumedSegments: <any[]>[], lastChild: 0, positionalParamSegments: {}};\n  if (route.path === '') {\n    if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    } else {\n      return {matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    }\n  }\n\n  const path = route.path;\n  const parts = path.split('/');\n  const positionalParamSegments: {[k: string]: UrlSegment} = {};\n  const consumedSegments: UrlSegment[] = [];\n\n  let currentIndex = 0;\n\n  for (let i = 0; i < parts.length; ++i) {\n    if (currentIndex >= segments.length) return noMatch;\n    const current = segments[currentIndex];\n\n    const p = parts[i];\n    const isPosParam = p.startsWith(':');\n\n    if (!isPosParam && p !== current.path) return noMatch;\n    if (isPosParam) {\n      positionalParamSegments[p.substring(1)] = current;\n    }\n    consumedSegments.push(current);\n    currentIndex++;\n  }\n\n  if (route.pathMatch === 'full' &&\n      (segmentGroup.hasChildren() || currentIndex < segments.length)) {\n    return {matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n  }\n\n  return {matched: true, consumedSegments, lastChild: currentIndex, positionalParamSegments};\n}\n\nfunction applyRedirectCommands(\n    segments: UrlSegment[], redirectTo: string,\n    posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n  const r = redirectTo.startsWith('/') ? redirectTo.substring(1) : redirectTo;\n  if (r === '') {\n    return [];\n  } else {\n    return createSegments(redirectTo, r.split('/'), segments, posParams);\n  }\n}\n\nfunction createSegments(\n    redirectTo: string, parts: string[], segments: UrlSegment[],\n    posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n  return parts.map(\n      p => p.startsWith(':') ? findPosParam(p, posParams, redirectTo) :\n                               findOrCreateSegment(p, segments));\n}\n\nfunction findPosParam(\n    part: string, posParams: {[k: string]: UrlSegment}, redirectTo: string): UrlSegment {\n  const paramName = part.substring(1);\n  const pos = posParams[paramName];\n  if (!pos) throw new Error(`Cannot redirect to '${redirectTo}'. Cannot find '${part}'.`);\n  return pos;\n}\n\nfunction findOrCreateSegment(part: string, segments: UrlSegment[]): UrlSegment {\n  let idx = 0;\n  for (const s of segments) {\n    if (s.path === part) {\n      segments.splice(idx);\n      return s;\n    }\n    idx++;\n  }\n  return new UrlSegment(part, {});\n}\n\n\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptySegments(\n                              config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments: []};\n\n  } else if (\n      slicedSegments.length === 0 &&\n      containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments};\n\n  } else {\n    return {segmentGroup, slicedSegments};\n  }\n}\n\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  } else {\n    return s;\n  }\n}\n\nfunction addEmptySegmentsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  for (let r of routes) {\n    if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return merge(children, res);\n}\n\nfunction createChildrenForEmptySegments(\n    routes: Route[], primarySegmentGroup: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegmentGroup;\n  for (let r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return res;\n}\n\nfunction containsEmptyPathRedirectsWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes\n             .filter(\n                 r => emptyPathRedirect(segmentGroup, slicedSegments, r) &&\n                     getOutlet(r) !== PRIMARY_OUTLET)\n             .length > 0;\n}\n\nfunction containsEmptyPathRedirects(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.filter(r => emptyPathRedirect(segmentGroup, slicedSegments, r)).length > 0;\n}\n\nfunction emptyPathRedirect(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')\n    return false;\n  return r.path === '' && r.redirectTo !== undefined;\n}\n\nfunction getOutlet(route: Route): string {\n  return route.outlet ? route.outlet : PRIMARY_OUTLET;\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}