{"version":3,"file":"template_ast.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/template_parser/template_ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SecurityContext} from '@angular/core';\n\nimport {CompileDirectiveMetadata, CompileProviderMetadata, CompileTokenMetadata} from '../compile_metadata';\nimport {AST} from '../expression_parser/ast';\nimport {isPresent} from '../facade/lang';\nimport {ParseSourceSpan} from '../parse_util';\n\nimport {LifecycleHooks} from '../private_import_core';\n\n\n\n/**\n * An Abstract Syntax Tree node representing part of a parsed Angular template.\n */\nexport interface TemplateAst {\n  /**\n   * The source span from which this node was parsed.\n   */\n  sourceSpan: ParseSourceSpan;\n\n  /**\n   * Visit this node and possibly transform it.\n   */\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}\n\n/**\n * A segment of text within the template.\n */\nexport class TextAst implements TemplateAst {\n  constructor(\n      public value: string, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitText(this, context); }\n}\n\n/**\n * A bound expression within the text of a template.\n */\nexport class BoundTextAst implements TemplateAst {\n  constructor(\n      public value: AST, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitBoundText(this, context);\n  }\n}\n\n/**\n * A plain attribute on an element.\n */\nexport class AttrAst implements TemplateAst {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitAttr(this, context); }\n}\n\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`).\n */\nexport class BoundElementPropertyAst implements TemplateAst {\n  constructor(\n      public name: string, public type: PropertyBindingType,\n      public securityContext: SecurityContext, public value: AST, public unit: string,\n      public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElementProperty(this, context);\n  }\n}\n\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`).\n */\nexport class BoundEventAst implements TemplateAst {\n  constructor(\n      public name: string, public target: string, public handler: AST,\n      public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEvent(this, context);\n  }\n  get fullName() {\n    if (isPresent(this.target)) {\n      return `${this.target}:${this.name}`;\n    } else {\n      return this.name;\n    }\n  }\n}\n\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nexport class ReferenceAst implements TemplateAst {\n  constructor(\n      public name: string, public value: CompileTokenMetadata, public sourceSpan: ParseSourceSpan) {\n  }\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitReference(this, context);\n  }\n}\n\n/**\n * A variable declaration on a <template> (e.g. `var-someName=\"someLocalName\"`).\n */\nexport class VariableAst implements TemplateAst {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitVariable(this, context);\n  }\n}\n\n/**\n * An element declaration in a template.\n */\nexport class ElementAst implements TemplateAst {\n  constructor(\n      public name: string, public attrs: AttrAst[], public inputs: BoundElementPropertyAst[],\n      public outputs: BoundEventAst[], public references: ReferenceAst[],\n      public directives: DirectiveAst[], public providers: ProviderAst[],\n      public hasViewContainer: boolean, public children: TemplateAst[],\n      public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElement(this, context);\n  }\n}\n\n/**\n * A `<template>` element included in an Angular template.\n */\nexport class EmbeddedTemplateAst implements TemplateAst {\n  constructor(\n      public attrs: AttrAst[], public outputs: BoundEventAst[], public references: ReferenceAst[],\n      public variables: VariableAst[], public directives: DirectiveAst[],\n      public providers: ProviderAst[], public hasViewContainer: boolean,\n      public children: TemplateAst[], public ngContentIndex: number,\n      public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEmbeddedTemplate(this, context);\n  }\n}\n\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nexport class BoundDirectivePropertyAst implements TemplateAst {\n  constructor(\n      public directiveName: string, public templateName: string, public value: AST,\n      public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirectiveProperty(this, context);\n  }\n}\n\n/**\n * A directive declared on an element.\n */\nexport class DirectiveAst implements TemplateAst {\n  constructor(\n      public directive: CompileDirectiveMetadata, public inputs: BoundDirectivePropertyAst[],\n      public hostProperties: BoundElementPropertyAst[], public hostEvents: BoundEventAst[],\n      public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirective(this, context);\n  }\n}\n\n/**\n * A provider declared on an element\n */\nexport class ProviderAst implements TemplateAst {\n  constructor(\n      public token: CompileTokenMetadata, public multiProvider: boolean, public eager: boolean,\n      public providers: CompileProviderMetadata[], public providerType: ProviderAstType,\n      public lifecycleHooks: LifecycleHooks[], public sourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    // No visit method in the visitor for now...\n    return null;\n  }\n}\n\nexport enum ProviderAstType {\n  PublicService,\n  PrivateService,\n  Component,\n  Directive,\n  Builtin\n}\n\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nexport class NgContentAst implements TemplateAst {\n  constructor(\n      public index: number, public ngContentIndex: number, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitNgContent(this, context);\n  }\n}\n\n/**\n * Enumeration of types of property bindings.\n */\nexport enum PropertyBindingType {\n\n  /**\n   * A normal binding to a property (e.g. `[property]=\"expression\"`).\n   */\n  Property,\n\n  /**\n   * A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n   */\n  Attribute,\n\n  /**\n   * A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n   */\n  Class,\n\n  /**\n   * A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n   */\n  Style,\n\n  /**\n   * A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n   */\n  Animation\n}\n\n/**\n * A visitor for {@link TemplateAst} trees that will process each node.\n */\nexport interface TemplateAstVisitor {\n  visitNgContent(ast: NgContentAst, context: any): any;\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any;\n  visitElement(ast: ElementAst, context: any): any;\n  visitReference(ast: ReferenceAst, context: any): any;\n  visitVariable(ast: VariableAst, context: any): any;\n  visitEvent(ast: BoundEventAst, context: any): any;\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): any;\n  visitAttr(ast: AttrAst, context: any): any;\n  visitBoundText(ast: BoundTextAst, context: any): any;\n  visitText(ast: TextAst, context: any): any;\n  visitDirective(ast: DirectiveAst, context: any): any;\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): any;\n}\n\n/**\n * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.\n */\nexport function templateVisitAll(\n    visitor: TemplateAstVisitor, asts: TemplateAst[], context: any = null): any[] {\n  var result: any[] = [];\n  asts.forEach(ast => {\n    var astResult = ast.visit(visitor, context);\n    if (isPresent(astResult)) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}