{"version":3,"file":"value_util.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/output/value_util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAGI,EAAC,yBAAyB,EAAC,MAAM,qBAAqB;OACtD,EAAC,gBAAgB,EAAC,MAAM,sBAAsB;OAC9C,EAAmB,UAAU,EAAC,MAAM,SAAS;OAE7C,KAAK,CAAC,MAAM,cAAc;AAEjC,wCAAwC,KAAU,EAAE,IAAmB;IAAnB,oBAAmB,GAAnB,WAAmB;IACrE,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,0BAA0B,EAAE,EAAE,IAAI,CAAC,CAAC;AACnE,CAAC;AAED;IAAA;IAwBA,CAAC;IAvBC,+CAAU,GAAV,UAAW,GAAU,EAAE,IAAY;QAAnC,iBAEC;QADC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,UAAU,CAAC,KAAK,EAAE,KAAI,EAAE,IAAI,CAAC,EAA7B,CAA6B,CAAC,EAAE,IAAI,CAAC,CAAC;IAC7E,CAAC;IAED,mDAAc,GAAd,UAAe,GAAyB,EAAE,IAAe;QAAzD,iBAMC;QALC,IAAI,OAAO,GAAiC,EAAE,CAAC;QAC/C,gBAAgB,CAAC,OAAO,CAAC,GAAG,EAAE,UAAC,KAAU,EAAE,GAAW;YACpD,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,KAAK,EAAE,KAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,mDAAc,GAAd,UAAe,KAAU,EAAE,IAAY,IAAkB,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAEzF,+CAAU,GAAV,UAAW,KAAU,EAAE,IAAY;QACjC,EAAE,CAAC,CAAC,KAAK,YAAY,yBAAyB,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,YAAY,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,mDAAiD,KAAO,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IACH,iCAAC;AAAD,CAAC,AAxBD,IAwBC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompileIdentifierMetadata} from '../compile_metadata';\nimport {StringMapWrapper} from '../facade/collection';\nimport {ValueTransformer, visitValue} from '../util';\n\nimport * as o from './output_ast';\n\nexport function convertValueToOutputAst(value: any, type: o.Type = null): o.Expression {\n  return visitValue(value, new _ValueOutputAstTransformer(), type);\n}\n\nclass _ValueOutputAstTransformer implements ValueTransformer {\n  visitArray(arr: any[], type: o.Type): o.Expression {\n    return o.literalArr(arr.map(value => visitValue(value, this, null)), type);\n  }\n\n  visitStringMap(map: {[key: string]: any}, type: o.MapType): o.Expression {\n    var entries: Array<string|o.Expression>[] = [];\n    StringMapWrapper.forEach(map, (value: any, key: string) => {\n      entries.push([key, visitValue(value, this, null)]);\n    });\n    return o.literalMap(entries, type);\n  }\n\n  visitPrimitive(value: any, type: o.Type): o.Expression { return o.literal(value, type); }\n\n  visitOther(value: any, type: o.Type): o.Expression {\n    if (value instanceof CompileIdentifierMetadata) {\n      return o.importExpr(value);\n    } else if (value instanceof o.Expression) {\n      return value;\n    } else {\n      throw new Error(`Illegal state: Don't now how to compile value ${value}`);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}