{"version":3,"file":"directive_resolver.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/directive_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAQ,iBAAiB,EAAC,MAAM,eAAe;OAEjI,EAAC,gBAAgB,EAAC,MAAM,qBAAqB;OAC7C,EAAC,SAAS,EAAE,SAAS,EAAC,MAAM,eAAe;OAC3C,EAAC,eAAe,EAAE,SAAS,EAAC,MAAM,uBAAuB;OACzD,EAAC,YAAY,EAAC,MAAM,QAAQ;AAEnC,8BAA8B,IAAS;IACrC,MAAM,CAAC,IAAI,YAAY,SAAS,CAAC;AACnC,CAAC;AAED;;;;;;GAMG;AAEH;IACE,2BAAoB,UAAuC;QAA/C,0BAA+C,GAA/C,sBAA+C;QAAvC,eAAU,GAAV,UAAU,CAA6B;IAAG,CAAC;IAE/D;;OAEG;IACH,mCAAO,GAAP,UAAQ,IAAe,EAAE,eAAsB;QAAtB,+BAAsB,GAAtB,sBAAsB;QAC7C,IAAI,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QACxE,EAAE,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YACvD,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBAC1D,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,sCAAoC,SAAS,CAAC,IAAI,CAAG,CAAC,CAAC;QACzE,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEO,sDAA0B,GAAlC,UACI,EAAa,EAAE,gBAAwC,EACvD,aAAwB;QAC1B,IAAI,MAAM,GAAa,EAAE,CAAC;QAC1B,IAAI,OAAO,GAAa,EAAE,CAAC;QAC3B,IAAI,IAAI,GAA4B,EAAE,CAAC;QACvC,IAAI,OAAO,GAAyB,EAAE,CAAC;QAEvC,gBAAgB,CAAC,OAAO,CAAC,gBAAgB,EAAE,UAAC,QAAe,EAAE,QAAgB;YAC3E,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;gBAChB,EAAE,CAAC,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC;oBACvB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;wBACrC,MAAM,CAAC,IAAI,CAAI,QAAQ,UAAK,CAAC,CAAC,mBAAqB,CAAC,CAAC;oBACvD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACxB,CAAC;gBACH,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,MAAM,CAAC,CAAC,CAAC;oBAC/B,IAAM,MAAM,GAAW,CAAC,CAAC;oBACzB,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;wBAC1C,OAAO,CAAC,IAAI,CAAI,QAAQ,UAAK,MAAM,CAAC,mBAAqB,CAAC,CAAC;oBAC7D,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACzB,CAAC;gBACH,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,WAAW,CAAC,CAAC,CAAC;oBACpC,IAAM,WAAW,GAAgB,CAAC,CAAC;oBACnC,EAAE,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;wBAC5C,IAAI,CAAC,OAAI,WAAW,CAAC,gBAAgB,OAAG,CAAC,GAAG,QAAQ,CAAC;oBACvD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,IAAI,CAAC,OAAI,QAAQ,OAAG,CAAC,GAAG,QAAQ,CAAC;oBACnC,CAAC;gBACH,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,YAAY,CAAC,CAAC,CAAC;oBACrC,IAAM,YAAY,GAAiB,CAAC,CAAC;oBACrC,IAAI,IAAI,GAAG,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,GAAW,YAAY,CAAC,IAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;oBACrF,IAAI,CAAC,OAAI,YAAY,CAAC,SAAS,OAAG,CAAC,GAAM,QAAQ,SAAI,IAAI,MAAG,CAAC;gBAC/D,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC;oBAC9B,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACxB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;IACxE,CAAC;IAEO,8CAAkB,GAA1B,UAA2B,GAAW,IAAI,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAEpF,kCAAM,GAAd,UACI,EAAa,EAAE,MAAgB,EAAE,OAAiB,EAAE,IAA6B,EACjF,OAA6B,EAAE,aAAwB;QAF3D,iBA2EC;QAxEC,IAAI,YAAsB,CAAC;QAE3B,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACzB,IAAM,YAAU,GACZ,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,GAAW,IAAa,OAAA,KAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,EAA5B,CAA4B,CAAC,CAAC;YACzE,MAAM,CAAC,OAAO,CAAC,UAAC,QAAgB;gBAC9B,IAAM,UAAU,GAAG,KAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;gBACrD,EAAE,CAAC,CAAC,YAAU,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxC,MAAM,IAAI,KAAK,CACX,YAAU,UAAU,qCAAgC,SAAS,CAAC,aAAa,CAAC,MAAG,CAAC,CAAC;gBACvF,CAAC;YACH,CAAC,CAAC,CAAC;YACH,YAAY,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,YAAY,GAAG,MAAM,CAAC;QACxB,CAAC;QAED,IAAI,aAAuB,CAAC;QAE5B,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAM,aAAW,GACb,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,GAAW,IAAa,OAAA,KAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,EAA5B,CAA4B,CAAC,CAAC;YAE1E,OAAO,CAAC,OAAO,CAAC,UAAC,SAAiB;gBAChC,IAAM,UAAU,GAAG,KAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;gBACtD,EAAE,CAAC,CAAC,aAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACzC,MAAM,IAAI,KAAK,CACX,mBAAiB,UAAU,qCAAgC,SAAS,CAAC,aAAa,CAAC,MAAG,CAAC,CAAC;gBAC9F,CAAC;YACH,CAAC,CAAC,CAAC;YACH,aAAa,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC7C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,aAAa,GAAG,OAAO,CAAC;QAC1B,CAAC;QAED,IAAI,UAAU,GAAG,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC;QACnF,IAAI,aAAa,GACb,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC;QAElF,EAAE,CAAC,CAAC,EAAE,YAAY,SAAS,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,IAAI,SAAS,CAAC;gBACnB,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACrB,MAAM,EAAE,YAAY;gBACpB,OAAO,EAAE,aAAa;gBACtB,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACrB,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACrB,OAAO,EAAE,aAAa;gBACtB,eAAe,EAAE,EAAE,CAAC,eAAe;gBACnC,SAAS,EAAE,EAAE,CAAC,SAAS;gBACvB,aAAa,EAAE,EAAE,CAAC,aAAa;gBAC/B,eAAe,EAAE,EAAE,CAAC,eAAe;gBACnC,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACrB,WAAW,EAAE,EAAE,CAAC,WAAW;gBAC3B,MAAM,EAAE,EAAE,CAAC,MAAM;gBACjB,SAAS,EAAE,EAAE,CAAC,SAAS;gBACvB,aAAa,EAAE,EAAE,CAAC,aAAa;gBAC/B,UAAU,EAAE,EAAE,CAAC,UAAU;gBACzB,aAAa,EAAE,EAAE,CAAC,aAAa;aAChC,CAAC,CAAC;QAEL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,SAAS,CAAC;gBACnB,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACrB,MAAM,EAAE,YAAY;gBACpB,OAAO,EAAE,aAAa;gBACtB,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACrB,OAAO,EAAE,aAAa;gBACtB,SAAS,EAAE,EAAE,CAAC,SAAS;aACxB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACI,4BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,gCAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,eAAe,GAAG;KACxB,CAAC;IACF,wBAAC;AAAD,CAAC,AApJD,IAoJC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, Directive, HostBinding, HostListener, Injectable, Input, Output, Query, Type, resolveForwardRef} from '@angular/core';\n\nimport {StringMapWrapper} from './facade/collection';\nimport {isPresent, stringify} from './facade/lang';\nimport {ReflectorReader, reflector} from './private_import_core';\nimport {splitAtColon} from './util';\n\nfunction _isDirectiveMetadata(type: any): type is Directive {\n  return type instanceof Directive;\n}\n\n/*\n * Resolve a `Type` for {@link Directive}.\n *\n * This interface can be overridden by the application developer to create custom behavior.\n *\n * See {@link Compiler}\n */\n\nexport class DirectiveResolver {\n  constructor(private _reflector: ReflectorReader = reflector) {}\n\n  /**\n   * Return {@link Directive} for a given `Type`.\n   */\n  resolve(type: Type<any>, throwIfNotFound = true): Directive {\n    var typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    if (isPresent(typeMetadata)) {\n      var metadata = typeMetadata.find(_isDirectiveMetadata);\n      if (isPresent(metadata)) {\n        var propertyMetadata = this._reflector.propMetadata(type);\n        return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);\n      }\n    }\n    if (throwIfNotFound) {\n      throw new Error(`No Directive annotation found on ${stringify(type)}`);\n    }\n    return null;\n  }\n\n  private _mergeWithPropertyMetadata(\n      dm: Directive, propertyMetadata: {[key: string]: any[]},\n      directiveType: Type<any>): Directive {\n    var inputs: string[] = [];\n    var outputs: string[] = [];\n    var host: {[key: string]: string} = {};\n    var queries: {[key: string]: any} = {};\n\n    StringMapWrapper.forEach(propertyMetadata, (metadata: any[], propName: string) => {\n      metadata.forEach(a => {\n        if (a instanceof Input) {\n          if (isPresent(a.bindingPropertyName)) {\n            inputs.push(`${propName}: ${a.bindingPropertyName}`);\n          } else {\n            inputs.push(propName);\n          }\n        } else if (a instanceof Output) {\n          const output: Output = a;\n          if (isPresent(output.bindingPropertyName)) {\n            outputs.push(`${propName}: ${output.bindingPropertyName}`);\n          } else {\n            outputs.push(propName);\n          }\n        } else if (a instanceof HostBinding) {\n          const hostBinding: HostBinding = a;\n          if (isPresent(hostBinding.hostPropertyName)) {\n            host[`[${hostBinding.hostPropertyName}]`] = propName;\n          } else {\n            host[`[${propName}]`] = propName;\n          }\n        } else if (a instanceof HostListener) {\n          const hostListener: HostListener = a;\n          var args = isPresent(hostListener.args) ? (<any[]>hostListener.args).join(', ') : '';\n          host[`(${hostListener.eventName})`] = `${propName}(${args})`;\n        } else if (a instanceof Query) {\n          queries[propName] = a;\n        }\n      });\n    });\n    return this._merge(dm, inputs, outputs, host, queries, directiveType);\n  }\n\n  private _extractPublicName(def: string) { return splitAtColon(def, [null, def])[1].trim(); }\n\n  private _merge(\n      dm: Directive, inputs: string[], outputs: string[], host: {[key: string]: string},\n      queries: {[key: string]: any}, directiveType: Type<any>): Directive {\n    let mergedInputs: string[];\n\n    if (isPresent(dm.inputs)) {\n      const inputNames: string[] =\n          dm.inputs.map((def: string): string => this._extractPublicName(def));\n      inputs.forEach((inputDef: string) => {\n        const publicName = this._extractPublicName(inputDef);\n        if (inputNames.indexOf(publicName) > -1) {\n          throw new Error(\n              `Input '${publicName}' defined multiple times in '${stringify(directiveType)}'`);\n        }\n      });\n      mergedInputs = dm.inputs.concat(inputs);\n    } else {\n      mergedInputs = inputs;\n    }\n\n    let mergedOutputs: string[];\n\n    if (isPresent(dm.outputs)) {\n      const outputNames: string[] =\n          dm.outputs.map((def: string): string => this._extractPublicName(def));\n\n      outputs.forEach((outputDef: string) => {\n        const publicName = this._extractPublicName(outputDef);\n        if (outputNames.indexOf(publicName) > -1) {\n          throw new Error(\n              `Output event '${publicName}' defined multiple times in '${stringify(directiveType)}'`);\n        }\n      });\n      mergedOutputs = dm.outputs.concat(outputs);\n    } else {\n      mergedOutputs = outputs;\n    }\n\n    var mergedHost = isPresent(dm.host) ? StringMapWrapper.merge(dm.host, host) : host;\n    var mergedQueries =\n        isPresent(dm.queries) ? StringMapWrapper.merge(dm.queries, queries) : queries;\n\n    if (dm instanceof Component) {\n      return new Component({\n        selector: dm.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: dm.exportAs,\n        moduleId: dm.moduleId,\n        queries: mergedQueries,\n        changeDetection: dm.changeDetection,\n        providers: dm.providers,\n        viewProviders: dm.viewProviders,\n        entryComponents: dm.entryComponents,\n        template: dm.template,\n        templateUrl: dm.templateUrl,\n        styles: dm.styles,\n        styleUrls: dm.styleUrls,\n        encapsulation: dm.encapsulation,\n        animations: dm.animations,\n        interpolation: dm.interpolation\n      });\n\n    } else {\n      return new Directive({\n        selector: dm.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: dm.exportAs,\n        queries: mergedQueries,\n        providers: dm.providers\n      });\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ReflectorReader, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}