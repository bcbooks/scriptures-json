{"version":3,"file":"schema_registry_mock.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/testing/schema_registry_mock.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAGI,EAAiB,eAAe,EAAC,MAAM,eAAe;AAE7D;IACE,4BACW,kBAA4C,EAC5C,eAAwC,EACxC,gBAA0C;QAF1C,uBAAkB,GAAlB,kBAAkB,CAA0B;QAC5C,oBAAe,GAAf,eAAe,CAAyB;QACxC,qBAAgB,GAAhB,gBAAgB,CAA0B;IAAG,CAAC;IAEzD,wCAAW,GAAX,UAAY,OAAe,EAAE,QAAgB,EAAE,OAAyB;QACtE,IAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,KAAK,KAAK,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;IACzC,CAAC;IAED,uCAAU,GAAV,UAAW,OAAe,EAAE,WAA6B;QACvD,IAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;QAC3D,MAAM,CAAC,KAAK,KAAK,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;IACzC,CAAC;IAED,4CAAe,GAAf,UAAgB,OAAe,EAAE,QAAgB;QAC/C,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC;IAC9B,CAAC;IAED,8CAAiB,GAAjB,UAAkB,QAAgB,IAAY,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;IAElG,2DAA8B,GAA9B,cAA2C,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;IACrE,yBAAC;AAAD,CAAC,AAvBD,IAuBC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementSchemaRegistry} from '@angular/compiler';\nimport {SchemaMetadata, SecurityContext} from '@angular/core';\n\nexport class MockSchemaRegistry implements ElementSchemaRegistry {\n  constructor(\n      public existingProperties: {[key: string]: boolean},\n      public attrPropMapping: {[key: string]: string},\n      public existingElements: {[key: string]: boolean}) {}\n\n  hasProperty(tagName: string, property: string, schemas: SchemaMetadata[]): boolean {\n    const value = this.existingProperties[property];\n    return value === void 0 ? true : value;\n  }\n\n  hasElement(tagName: string, schemaMetas: SchemaMetadata[]): boolean {\n    const value = this.existingElements[tagName.toLowerCase()];\n    return value === void 0 ? true : value;\n  }\n\n  securityContext(tagName: string, property: string): SecurityContext {\n    return SecurityContext.NONE;\n  }\n\n  getMappedPropName(attrName: string): string { return this.attrPropMapping[attrName] || attrName; }\n\n  getDefaultComponentElementName(): string { return 'ng-component'; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}