{"version":3,"file":"headers.js","sourceRoot":"","sources":["../../../../modules/@angular/http/src/headers.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ListWrapper, Map, MapWrapper, StringMapWrapper, isListLikeIterable, iterateListLike} from '../src/facade/collection';\nimport {isBlank} from '../src/facade/lang';\n\n\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example ([live demo](http://plnkr.co/edit/MTdwT6?p=preview))\n *\n * ```\n * import {Headers} from '@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @experimental\n */\nexport class Headers {\n  /** @internal */\n  _headersMap: Map<string, string[]>;\n  constructor(headers?: Headers|{[key: string]: any}) {\n    if (headers instanceof Headers) {\n      this._headersMap = new Map<string, string[]>((<Headers>headers)._headersMap);\n      return;\n    }\n\n    this._headersMap = new Map<string, string[]>();\n\n    if (isBlank(headers)) {\n      return;\n    }\n\n    // headers instanceof StringMap\n    StringMapWrapper.forEach(headers, (v: any, k: string) => {\n      this._headersMap.set(normalize(k), isListLikeIterable(v) ? v : [v]);\n    });\n  }\n\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   */\n  static fromResponseHeaderString(headersString: string): Headers {\n    let headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const index = line.indexOf(':');\n      if (index > 0) {\n        const key = line.substring(0, index);\n        const value = line.substring(index + 1).trim();\n        headers.set(key, value);\n      }\n    });\n\n    return headers;\n  }\n\n  /**\n   * Appends a header to existing list of header values for a given header name.\n   */\n  append(name: string, value: string): void {\n    name = normalize(name);\n    var mapName = this._headersMap.get(name);\n    var list = isListLikeIterable(mapName) ? mapName : [];\n    list.push(value);\n    this._headersMap.set(name, list);\n  }\n\n  /**\n   * Deletes all header values for the given name.\n   */\n  delete (name: string): void { this._headersMap.delete(normalize(name)); }\n\n  forEach(fn: (values: string[], name: string, headers: Map<string, string[]>) => void): void {\n    this._headersMap.forEach(fn);\n  }\n\n  /**\n   * Returns first header that matches given name.\n   */\n  get(header: string): string { return ListWrapper.first(this._headersMap.get(normalize(header))); }\n\n  /**\n   * Check for existence of header by given name.\n   */\n  has(header: string): boolean { return this._headersMap.has(normalize(header)); }\n\n  /**\n   * Provides names of set headers\n   */\n  keys(): string[] { return MapWrapper.keys(this._headersMap); }\n\n  /**\n   * Sets or overrides header value for given name.\n   */\n  set(header: string, value: string|string[]): void {\n    var list: string[] = [];\n\n    if (isListLikeIterable(value)) {\n      var pushValue = (<string[]>value).join(',');\n      list.push(pushValue);\n    } else {\n      list.push(<string>value);\n    }\n\n    this._headersMap.set(normalize(header), list);\n  }\n\n  /**\n   * Returns values of all headers.\n   */\n  values(): string[][] { return MapWrapper.values(this._headersMap); }\n\n  /**\n   * Returns string of all headers.\n   */\n  toJSON(): {[key: string]: any} {\n    let serializableHeaders = {};\n    this._headersMap.forEach((values: string[], name: string) => {\n      let list: any[] /** TODO #9100 */ = [];\n\n      iterateListLike(\n          values, (val: any /** TODO #9100 */) => list = ListWrapper.concat(list, val.split(',')));\n\n      (serializableHeaders as any /** TODO #9100 */)[normalize(name)] = list;\n    });\n    return serializableHeaders;\n  }\n\n  /**\n   * Returns list of header values for a given name.\n   */\n  getAll(header: string): string[] {\n    var headers = this._headersMap.get(normalize(header));\n    return isListLikeIterable(headers) ? headers : [];\n  }\n\n  /**\n   * This method is not implemented.\n   */\n  entries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n}\n\n// \"HTTP character sets are identified by case-insensitive tokens\"\n// Spec at https://tools.ietf.org/html/rfc2616\n// This implementation is same as NodeJS.\n// see https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_message_headers\nfunction normalize(name: string): string {\n  return name.toLowerCase();\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}