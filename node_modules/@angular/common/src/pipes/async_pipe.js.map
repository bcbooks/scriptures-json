{"version":3,"file":"async_pipe.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/pipes/async_pipe.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, OnDestroy, Pipe, WrappedValue} from '@angular/core';\nimport {EventEmitter, Observable} from '../facade/async';\nimport {isBlank, isPresent, isPromise} from '../facade/lang';\nimport {InvalidPipeArgumentError} from './invalid_pipe_argument_error';\n\ninterface SubscriptionStrategy {\n  createSubscription(async: any, updateLatestValue: any): any;\n  dispose(subscription: any): void;\n  onDestroy(subscription: any): void;\n}\n\nclass ObservableStrategy implements SubscriptionStrategy {\n  createSubscription(async: any, updateLatestValue: any): any {\n    return async.subscribe({next: updateLatestValue, error: (e: any) => { throw e; }});\n  }\n\n  dispose(subscription: any): void { subscription.unsubscribe(); }\n\n  onDestroy(subscription: any): void { subscription.unsubscribe(); }\n}\n\nclass PromiseStrategy implements SubscriptionStrategy {\n  createSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): any {\n    return async.then(updateLatestValue, e => { throw e; });\n  }\n\n  dispose(subscription: any): void {}\n\n  onDestroy(subscription: any): void {}\n}\n\nvar _promiseStrategy = new PromiseStrategy();\nvar _observableStrategy = new ObservableStrategy();\nvar __unused: Promise<any>;  // avoid unused import when Promise union types are erased\n\n/**\n * @ngModule CommonModule\n * @whatItDoes Unwraps a value from an asynchronous primitive.\n * @howToUse `observable_or_promise_expression | async`\n * @description\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n *\n *\n * ## Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuesly updates the view with the current time.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n * @stable\n */\n\nexport class AsyncPipe implements OnDestroy {\n  /** @internal */\n  _latestValue: Object = null;\n  /** @internal */\n  _latestReturnedValue: Object = null;\n\n  /** @internal */\n  _subscription: Object = null;\n  /** @internal */\n  _obj: Observable<any>|Promise<any>|EventEmitter<any> = null;\n  /** @internal */\n  _ref: ChangeDetectorRef;\n  private _strategy: SubscriptionStrategy = null;\n\n  constructor(_ref: ChangeDetectorRef) { this._ref = _ref; }\n\n  ngOnDestroy(): void {\n    if (isPresent(this._subscription)) {\n      this._dispose();\n    }\n  }\n\n  transform(obj: Observable<any>|Promise<any>|EventEmitter<any>): any {\n    if (isBlank(this._obj)) {\n      if (isPresent(obj)) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform(obj);\n    }\n\n    if (this._latestValue === this._latestReturnedValue) {\n      return this._latestReturnedValue;\n    } else {\n      this._latestReturnedValue = this._latestValue;\n      return WrappedValue.wrap(this._latestValue);\n    }\n  }\n\n  /** @internal */\n  _subscribe(obj: Observable<any>|Promise<any>|EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n        obj, (value: Object) => this._updateLatestValue(obj, value));\n  }\n\n  /** @internal */\n  _selectStrategy(obj: Observable<any>|Promise<any>|EventEmitter<any>): any {\n    if (isPromise(obj)) {\n      return _promiseStrategy;\n    } else if ((<any>obj).subscribe) {\n      return _observableStrategy;\n    } else {\n      throw new InvalidPipeArgumentError(AsyncPipe, obj);\n    }\n  }\n\n  /** @internal */\n  _dispose(): void {\n    this._strategy.dispose(this._subscription);\n    this._latestValue = null;\n    this._latestReturnedValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n\n  /** @internal */\n  _updateLatestValue(async: any, value: Object) {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'async', pure: false}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ChangeDetectorRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}