{"version":3,"file":"validators.js","sourceRoot":"","sources":["../../../../../modules/@angular/forms/src/directives/validators.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {isPresent} from '../facade/lang';\nimport {AbstractControl} from '../model';\nimport {NG_VALIDATORS, Validators} from '../validators';\n\n\n\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * @Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport interface Validator {\n  validate(c: AbstractControl): {[key: string]: any};\n  registerOnValidatorChange?(fn: () => void): void;\n}\n\nexport const REQUIRED_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true\n};\n\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @stable\n */\n\nexport class RequiredValidator implements Validator {\n  private _required: boolean;\n  private _onChange: () => void;\n\n  \n  get required(): boolean { return this._required; }\n\n  set required(value: boolean) {\n    this._required = isPresent(value) && `${value}` !== 'false';\n    if (this._onChange) this._onChange();\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.required ? Validators.required(c) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void) { this._onChange = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[required][formControlName],[required][formControl],[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required? \"\" : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'required': [{ type: Input },],\n};\n}\n\n/**\n * @stable\n */\nexport interface ValidatorFn { (c: AbstractControl): {[key: string]: any}; }\n\n/**\n * @stable\n */\nexport interface AsyncValidatorFn {\n  (c: AbstractControl): any /*Promise<{[key: string]: any}>|Observable<{[key: string]: any}>*/;\n}\n\n/**\n * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\n\n/**\n * A directive which installs the {@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * @stable\n */\n\nexport class MinLengthValidator implements Validator,\n    OnChanges {\n  private _validator: ValidatorFn;\n  private _onChange: () => void;\n\n   minlength: string;\n\n  private _createValidator() {\n    this._validator = Validators.minLength(parseInt(this.minlength, 10));\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['minlength']) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return isPresent(this.minlength) ? this._validator(c) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void) { this._onChange = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': 'minlength? minlength : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minlength': [{ type: Input },],\n};\n}\n\n/**\n * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\n\n/**\n * A directive which installs the {@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n *\n * @stable\n */\n\nexport class MaxLengthValidator implements Validator,\n    OnChanges {\n  private _validator: ValidatorFn;\n  private _onChange: () => void;\n\n   maxlength: string;\n\n  private _createValidator() {\n    this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['maxlength']) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return isPresent(this.maxlength) ? this._validator(c) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void) { this._onChange = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': 'maxlength? maxlength : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'maxlength': [{ type: Input },],\n};\n}\n\n\nexport const PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\n\n\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * @stable\n */\n\nexport class PatternValidator implements Validator,\n    OnChanges {\n  private _validator: ValidatorFn;\n  private _onChange: () => void;\n\n   pattern: string;\n\n  private _createValidator() { this._validator = Validators.pattern(this.pattern); }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['pattern']) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return isPresent(this.pattern) ? this._validator(c) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void) { this._onChange = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': 'pattern? pattern : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pattern': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}