{"version":3,"file":"abstract_control_directive.js","sourceRoot":"","sources":["../../../../../modules/@angular/forms/src/directives/abstract_control_directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from '../facade/async';\nimport {isPresent} from '../facade/lang';\nimport {AbstractControl} from '../model';\n\n/**\n * Base class for control directives.\n *\n * Only used internally in the forms module.\n *\n * @stable\n */\nexport abstract class AbstractControlDirective {\n  get control(): AbstractControl { throw new Error('unimplemented'); }\n\n  get value(): any { return isPresent(this.control) ? this.control.value : null; }\n\n  get valid(): boolean { return isPresent(this.control) ? this.control.valid : null; }\n\n  get invalid(): boolean { return isPresent(this.control) ? this.control.invalid : null; }\n\n  get pending(): boolean { return isPresent(this.control) ? this.control.pending : null; }\n\n  get errors(): {[key: string]: any} {\n    return isPresent(this.control) ? this.control.errors : null;\n  }\n\n  get pristine(): boolean { return isPresent(this.control) ? this.control.pristine : null; }\n\n  get dirty(): boolean { return isPresent(this.control) ? this.control.dirty : null; }\n\n  get touched(): boolean { return isPresent(this.control) ? this.control.touched : null; }\n\n  get untouched(): boolean { return isPresent(this.control) ? this.control.untouched : null; }\n\n  get disabled(): boolean { return isPresent(this.control) ? this.control.disabled : null; }\n\n  get enabled(): boolean { return isPresent(this.control) ? this.control.enabled : null; }\n\n  get statusChanges(): Observable<any> {\n    return isPresent(this.control) ? this.control.statusChanges : null;\n  }\n\n  get valueChanges(): Observable<any> {\n    return isPresent(this.control) ? this.control.valueChanges : null;\n  }\n\n  get path(): string[] { return null; }\n\n  reset(value: any = undefined): void {\n    if (isPresent(this.control)) this.control.reset(value);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}